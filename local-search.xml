<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>What is Sass?</title>
    <link href="/2022/08/22/20220822/"/>
    <url>/2022/08/22/20220822/</url>
    
    <content type="html"><![CDATA[<p>  我們可以想像一下…<br>假設你要洗衣服，你需要按洗衣機的觸控面板才能啟動。<br>Sass就像是你使用洗衣觸控面板功能，你的指令會轉化成洗衣機懂的語言，才能啟動洗衣機執行洗衣服。</p><p>Sass（英文全稱：Syntactically Awesome Stylesheets），是一個開發的層疊樣式表語言。　<br>Sass是一個將指令碼解析成CSS的<a href="https://zh.wikipedia.org/zh-tw/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80"><strong>手稿語言</strong></a>，即SassScript。Sass包括兩套語法。<br>sass是舊版本，業界主流是scss。<br>最開始的語法叫做「縮排語法」，使用縮排來區分代碼塊，並且用換行將不同規則分隔開。<br>而較新的語法叫做「SCSS」，使用和CSS一樣的塊語法，即使用大括號將不同的規則分開，使用分號將具體的樣式分開。<br>通常情況下，這兩套語法通過.sass和.scss兩個<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D"><strong>副檔名</strong></a>區分開。</p><hr><h3 id="Sass-中的-amp-是什麼"><a href="#Sass-中的-amp-是什麼" class="headerlink" title="Sass 中的 &amp; 是什麼 ?"></a>Sass 中的 <strong>&amp;</strong> 是什麼 ?</h3><p>“ &amp; “ 可以看作是串聯選擇器的連接符。<br>連接符引用父層選擇器作替代， &amp; 連接符會代替父層選擇器: <a>，然後使鏈結懸停並改變鏈接的顏色爲其他顏色。<br>“&amp;” 省下了重複撰寫的時間，但過於巢狀也會導致程式碼不好維護，盡量在三層內解決！</p><h5 id="基礎概念"><a href="#基礎概念" class="headerlink" title="基礎概念:"></a>基礎概念:</h5><p>在CSS中，要想給一個元素賦予一定的樣式，我們必須得先取到這個元素。那麼就得需要選擇器，通過選擇器來選擇指定元素，然後賦予所需的樣式。</p><p>而CSS選擇器有很多種，比如層次選擇器中的**<code>後代選擇器</code><strong>、</strong><code>兄弟選擇器</code><strong>、</strong><code>通用兄弟選擇器</code>**等。</p><p>而這些選擇器都通過元素與元素之間的關係來確定的，比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> <span class="hljs-selector-class">.child</span> &#123;...&#125;<br><br></code></pre></td></tr></table></figure><p>除了這些選擇器，還有**<code>偽類選擇器</code>**:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.ele</span><span class="hljs-selector-pseudo">:after</span>&#123;...&#125;<br><br></code></pre></td></tr></table></figure><p>有時候還有**<code>多類選擇器</code>**：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.className1</span><span class="hljs-selector-class">.className2</span>&#123;...&#125;<br><br></code></pre></td></tr></table></figure><p>這些選擇器在CSS中都是基礎知識，很多同學對其來說並不陌生。今天要說的也不是選擇器如何用，而是想說說，如何在編寫代碼的時候，少寫選擇器，就能實現他們之間的依賴關係。</p><h6 id="引用父層選擇器-的連接符-amp"><a href="#引用父層選擇器-的連接符-amp" class="headerlink" title="引用父層選擇器 的連接符 &amp;"></a>引用父層選擇器 的連接符 <strong>&amp;</strong></h6><p>在CSS中，這種想法是無法實現的，但在Sass中，可以輕鬆的通過**連接符<code>&amp;</code>**來實現。</p><p>我們先來回憶一下，CSS中常見的一組樣式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*頁面中鏈接的顏色*/</span><br><span class="hljs-selector-tag">a</span> &#123;<br>  clolor: <span class="hljs-number">#ff3366</span>; <br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#cc0033</span>; <br>&#125;<br><span class="hljs-comment">/*主選單中鏈接的顏色*/</span><br><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff668c</span>; <br>&#125;<br><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff99b3</span>; <br>&#125;<br><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.active</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff0040</span>; <br>&#125;<br><span class="hljs-comment">/*頁尾選單中鏈接的顏色*/</span><br><span class="hljs-selector-class">.footer-menu</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff1a53</span>; <br>&#125;<br><span class="hljs-selector-class">.footer-menu</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#cc0033</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>這是一組控制頁面鏈接顏色的樣式代碼，首先在樣式中定義了共通樣的連結文預設顏色，而主選單和頁尾選單中連結文預設顏色各不相同，我們需要通過類名<code>.nav-menu</code>和<code>.footer-menu</code>來覆蓋默認的樣式。</p><p>這樣我們在寫樣式的時候，在選擇器這一部分，我們都需要書寫相同的一個部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sass">aa:hover<br></code></pre></td></tr></table></figure><p>或許你覺得這有什麼的，真是大驚小怪。但是，如果你的選擇器偏長，重複的代碼偏多，一定會影響您的開發速度，從而影響你的效率。</p><p>那麼在Sass中，通過**連接符<code>&amp;</code>**可以幫助我們避免這樣的問題，而且還可以實現一些其他的效果。</p><h6 id="與偽類的結合"><a href="#與偽類的結合" class="headerlink" title="與偽類的結合"></a>與偽類的結合</h6><p>偽類和偽元素在CSS中是常用的一種方式。</p><p>比如最常見的是連結網址的偽類或者說偽元素<code>:after</code>和<code>:before</code>的使用。</p><p>大家常看到的就是清除浮動的<code>clearfix</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-attribute">display</span>:table;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">clear</span>:both;<span class="hljs-attribute">overflow</span>:hidden;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span> &#123;<br>    *zoom: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>那麼在Sass中，使用<code>&amp;</code>會變得更簡單，更方便：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sass">$lte-ie: true !default;<br><br>.clearfix &#123;<br>    @if $lte-ie &#123;<br>        *zoom: 1;<br>    &#125;<br><br>    &amp;:before,<br>    &amp;:after &#123;<br>        content: &quot;&quot;;<br>        display: table;<br>    &#125;<br>    &amp;:after &#123;<br>        clear: both;<br>        overflow: hidden;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>這個簡單的例子非常明確說明，在Sass中可以使用<code>&amp;</code>和偽元素、偽類配合使用，而且使用的方法非常簡單。就是用<code>&amp;</code>替代元素自身。</p><h6 id="多類選擇器-className1-className2在CSS中並不常見-主要因為在IE6中解析有所偏差-，但還是非常有用。"><a href="#多類選擇器-className1-className2在CSS中並不常見-主要因為在IE6中解析有所偏差-，但還是非常有用。" class="headerlink" title="多類選擇器.className1　.className2在CSS中並不常見(主要因為在IE6中解析有所偏差)，但還是非常有用。"></a>多類選擇器<code>.className1</code>　<code>.className2</code>在CSS中並不常見(主要因為在<code>IE6</code>中解析有所偏差)，但還是非常有用。</h6><p>比如說增加一個懸浮效果的時候，可以看到這樣的樣式代碼：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.mod</span><span class="hljs-selector-class">.on</span> &#123;<br>    <span class="hljs-attribute">color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>那麼在Sass中，同樣可以使用<code>&amp;</code>來替代選擇器<code>.mod</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sass">.mod &#123;<br>    &amp;.on&#123;<br>        color: green;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>這裡需要特別的注意，<code>&amp;</code>和相連的類名之間不能有任何的空格，不然就會變成CSS選擇器中的後代選擇器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sass">.mod &#123;<br>    &amp; .on &#123;<br>        color: green;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>編譯出來的CSS就成了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.mod</span> <span class="hljs-selector-class">.on</span> &#123;<br>  <span class="hljs-attribute">color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Sass中還有同等效果的寫法是Sass的直接嵌套：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sass">.mod &#123;<br>.on &#123;<br>color: green;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="後代選擇器"><a href="#後代選擇器" class="headerlink" title="後代選擇器"></a>後代選擇器</h6><p>正如上面的示例所示，在Sass中可以通過Sass的層級嵌套來實現後代選擇器。嵌套的越深，層級越多：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sass">.nav-menu &#123;<br>li &#123;<br>a &#123;<br>color: green;<br>          &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成的CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br><span class="hljs-attribute">color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>看到這里大家或許會問，這跟<code>&amp;</code>有什麼關係呢？因為在選擇器前面加上<code>&amp;</code>符和不加上<code>&amp;</code>符將得到的效果是一樣。</p><p>但大家可能也碰到過，有時候在Sass先寫了子元素的效果，但還需要另一個地方來覆蓋，那麼<code>&amp;</code>將會起到大作用。</p><p>先來看一個簡單的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sass">a &#123;<br>color: red;<br>.nav-menu &amp;&#123;<br>    color: blue;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成的CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br><span class="hljs-attribute">color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-tag">a</span> &#123;<br><span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例非常簡單的說明了一切，<code>&amp;</code>在選擇器後面時的功能。但這裡需要特別的注意，<code>&amp;</code>寫在後面的，前面必須要有空格。不然Sass在編譯時將會報錯：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sass">Change detected to: test.scss<br>error test.scss (Line 78: Invalid CSS after &quot; .nav-menu&quot;: expected <br>&quot;&#123;&quot;, was &quot;&amp;&#123;&quot;<br>&quot;&amp;&quot; may only be used at the beginning of a compound selector.)<br></code></pre></td></tr></table></figure><p>綜合上面所述，我們回到文章最開頭的那段CSS代碼，我們只需要靈活的運用好<code>&amp;</code>，就可以輕鬆的完成：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs css">$<span class="hljs-attribute">color</span>: <span class="hljs-number">#444</span>;<br>$bg-<span class="hljs-attribute">color</span>: <span class="hljs-number">#f5f5f5</span>;<br>$link-<span class="hljs-attribute">color</span>: <span class="hljs-number">#f36</span>;<br><span class="hljs-selector-tag">a</span> &#123;<br>clolor: $link-color;<br><br>&amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">darken</span>($link-color, <span class="hljs-number">20%</span>);<br>&#125;<br><br>//<span class="hljs-selector-tag">Main</span> <span class="hljs-selector-tag">menu</span> Link <span class="hljs-attribute">Color</span><br><span class="hljs-selector-class">.nav-menu</span> &amp; &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">lighten</span>($link-color, <span class="hljs-number">10%</span>);<br><br>    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-built_in">lighten</span>($link-color, <span class="hljs-number">20%</span>);<br>    &#125;<br><br>    &amp;<span class="hljs-selector-class">.active</span> &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-built_in">darken</span>($link-color, <span class="hljs-number">10%</span>);<br>    &#125;<br>&#125;<br><br>//<span class="hljs-selector-tag">Footer</span> <span class="hljs-selector-tag">menu</span> link <span class="hljs-attribute">color</span><br><span class="hljs-selector-class">.footer-menu</span> &amp; &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">darken</span>($link-color, <span class="hljs-number">5%</span>);<br><br>    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-built_in">darken</span>($link-color, <span class="hljs-number">20%</span>);<br>    &#125;<br>&#125;<br><br>//<span class="hljs-selector-tag">Footer</span> <span class="hljs-selector-tag">menu</span> link <span class="hljs-attribute">color</span><br>    <span class="hljs-selector-class">.footer-menu</span> &amp; &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-built_in">darken</span>($link-color, <span class="hljs-number">5%</span>);<br><br>        &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">darken</span>($link-color, <span class="hljs-number">20%</span>);<br>        &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="相鄰兄弟選擇"><a href="#相鄰兄弟選擇" class="headerlink" title="相鄰兄弟選擇"></a>相鄰兄弟選擇</h6><p>在CSS選擇器中還有一種是相鄰兄弟選擇器。如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">label</span> + <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;text&quot;</span>]</span>&#123;...&#125;<br></code></pre></td></tr></table></figure><p><code>input[type=&quot;text&quot;]</code>元素緊鄰<code>label</code>元素。</p><p>在Sass中，同樣可以使用<code>&amp;</code>符來替代其中某個元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sass">lable &#123;<br>color: green;<br>&amp; + input[type=&quot;text&quot;] &#123;<br>    border: 1px solid green;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>編譯CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">lable &#123;<br><span class="hljs-attribute">color</span>: green;<br>&#125;<br>lable + <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;text&quot;</span>]</span> &#123;<br><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;<br>&#125;<br></code></pre></td></tr></table></figure><p>在這裡僅僅想通過這樣一個簡單的示例來演示<code>&amp;</code>在選擇器中所承載的對象，換句話說，就是<code>&amp;</code>替代的是哪一處元素。</p><p>這跟其所處的位置以及對應使用的選擇器符號很有關係。</p><h6 id="媒體查詢中的嵌套功能（-Nested-Rules-）"><a href="#媒體查詢中的嵌套功能（-Nested-Rules-）" class="headerlink" title="媒體查詢中的嵌套功能（ Nested Rules ）"></a>媒體查詢中的嵌套功能（ Nested Rules ）</h6><p>在Sass中，媒體查詢配合<code>&amp;</code>符，可以輕鬆的讓你管理幾個不同版式的樣式（方便管理不同斷點下的樣式），先來看一個簡單的示例：</p><pre><code class="hljs"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sass">.main &#123;<br>float: left;<br>width: 45em;@media (max-width: 480px) &#123;<br>    &amp; &#123;<br>        float: none;<br>        width: 100%;<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>編譯出來的CSS:<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.main</span> &#123;<br><span class="hljs-attribute">float</span>: left;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">45em</span>;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">480px</span>) &#123;<br><span class="hljs-selector-class">.main</span> &#123;<br><span class="hljs-attribute">float</span>: none;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>這樣在製作響應式設計的時候是不是變得非常的簡單，而且易於管理你的代碼。不過除了上面種方式之外，我們還可以採用下面的方式與媒體查詢配合使用：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.main</span> &#123;<br><span class="hljs-attribute">float</span>: left;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">45em</span>;&amp; &#123;<br>    <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">480px</span>) &#123;<br>        <span class="hljs-attribute">float</span>: none;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><p>這段SCSS代碼編譯出來的CSS和前面的是一模一樣的。</p><h6 id="amp-符在Sass中存在的問題"><a href="#amp-符在Sass中存在的問題" class="headerlink" title="&amp; 符在Sass中存在的問題"></a><strong><code>&amp;</code></strong> 符在Sass中存在的問題</h6><p>前面主要演示了<code>&amp;</code>在Sass中如何讓你更好的使用您的選擇器，但是<code>&amp;</code>在Sass中運用也存在一些問題。接下來一起看看<code>&amp;</code>在Sass中存在的問題，以及如何避免這些問題。</p><p>說到這個問題，我們繼續拿CSS中的BEM來說事。</p><p>先簡單說明一下BEM的模式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.block</span>&#123;...&#125;<br><span class="hljs-selector-class">.block__element</span>&#123;...&#125;<br><span class="hljs-selector-class">.block--modifier</span>&#123;...&#125;<br></code></pre></td></tr></table></figure><p>很想在Sass中通過下面的方式實現BEM的模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sass">.block&#123;<br>...<br>&amp;__element&#123;...&#125;<br>&amp;--modifier&#123;...&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可是這樣書寫，編譯器無法編譯，將會報出錯誤信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sass">Invalid CSS after &quot; &amp;&quot;: expected &quot;&#123;&quot;, was &quot;__element&#123;&quot;<br>&quot;__element&quot; may only be used at the beginning of a compound selector.)<br></code></pre></td></tr></table></figure><p>此時很多人有可能想到了使用Sass中的插件<code>#&#123;&amp;&#125;</code>的方式來替代<code>.block</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sass">.block&#123;<br>clolor: red;<br>#&#123;&amp;&#125;__element&#123;<br>color: green;<br>&#125;<br>#&#123;&amp;&#125;--modifier&#123;<br>color: blue;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但編譯出來的CSS代碼還是不盡人意：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.block</span> &#123;<br>clolor: red;<br>&#125;<br><span class="hljs-selector-class">.block</span> <span class="hljs-selector-class">.block__element</span> &#123;<br><span class="hljs-attribute">color</span>: green;<br>&#125;<br><span class="hljs-selector-class">.block</span> <span class="hljs-selector-class">.block--modifier</span> &#123;<br><span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p>編譯出來的CSS代碼雖然有效，但並不是好的CSS代碼。</p><p>而且這樣編譯出來的CSS也離開了BEM的初衷。</p><p>這也是<code>&amp;</code>在Sass中當作插值使用不盡人意之處。</p><p>不過這種現像也有方法可以解決。</p><p>簡單一點的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sass">$last-rule: null;<br>.block&#123;<br>clolor: red;<br>$last-rule: &amp;;<br>&#125;<br>#&#123;$last-rule&#125;__element&#123;<br>color: green;<br>&#125;<br>#&#123;$last-rule&#125;--modifier&#123;<br>color: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p>編譯出來的CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.block</span> &#123;<br>clolor: red;<br>&#125;<br><span class="hljs-selector-class">.block__element</span> &#123;<br><span class="hljs-attribute">color</span>: green;<br>&#125;<br><span class="hljs-selector-class">.block--modifier</span> &#123;<br><span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p>這種方法有兩個關鍵之處：</p><p>定義一個變量<code>$last-rule</code>，賦予變量值為<code>null</code>主要用來代表相同的前綴；<br>在B中通過<code>$last-rule:&amp;</code>來賦予新值也就代表了對應的綴。</p><p><code>**特別聲明：採用這種方法，編譯的時候會提示警告信息，但並不會影響代碼**</code></p><p>編譯：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">Assigning <span class="hljs-selector-tag">to</span> global variable &quot;$last-rule&quot; by default is deprecated.<br>In future versions of Sass, this will create <span class="hljs-selector-tag">a</span> new local variable.<br>If you want <span class="hljs-selector-tag">to</span> assign <span class="hljs-selector-tag">to</span> the global variable, use &quot;$last-rule: &amp; !global<span class="hljs-string">&quot; instead.</span><br></code></pre></td></tr></table></figure><p>值得慶幸的是，在Sass的測試版本中有一個新的功能<code>@at-root</code>。</p><p>使用他配合<code>#&#123;&amp;&#125;</code>可以輕鬆的解決這個問題。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sass">.block &#123;<br>color: red;<br>@at-root #&#123;&amp;&#125;__element&#123;<br>    color: green;<br>&#125;<br><br>@at-root #&#123;&amp;&#125;--modifier&#123;<br>    color: blue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>編譯出來的CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.block</span> &#123;<br>clolor: red;<br>&#125;<br><span class="hljs-selector-class">.block__element</span> &#123;<br><span class="hljs-attribute">color</span>: green;<br>&#125;<br><span class="hljs-selector-class">.block--modifier</span> &#123;<br><span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p>這個是不是簡單輕鬆多了?</p><h6 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h6><pre><code class="hljs">  Sass中的連接符`&amp;`讓你在嵌套和插值的使用過程時，會讓你憂，會讓你喜。 憂的是一不小心使用不對帶來錯誤，或者讓你的代碼變得冗餘。 喜的是讓你控制選擇器變得更加的靈活。</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>My first blog</title>
    <link href="/2022/08/19/20220819/"/>
    <url>/2022/08/19/20220819/</url>
    
    <content type="html"><![CDATA[<p>大家好! 我是<a href="https://github.com/naiomidaphne">Daphne</a>! </p><p>這是我學習網頁開發後第一次自己架設的部落格，也是我第一篇部落格，算是一個新的開始，未來有更多的文章分享給大家！</p><p>期待與大家多多交流囉！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
